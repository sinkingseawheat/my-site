import type { Metadata, Viewport } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const PROTOCOL_AND_FQDN = process.env.NEXT_PUBLIC_PROTOCOL_AND_FQDN;
const AUTHOR_NAME = process.env.NEXT_PUBLIC_AUTHOR_NAME;
const SITE_NAME = process.env.NEXT_PUBLIC_SITE_NAME;

export const generateMetadata = async (): Promise<Metadata> => {
  const metaData:Metadata = {
    "metadataBase": PROTOCOL_AND_FQDN===undefined ? undefined : new URL(PROTOCOL_AND_FQDN),
    "title":{
      "default": `${AUTHOR_NAME}のページです`,
      "template": `%s | ${SITE_NAME}`
    },
    "robots": {
      "index": true,
      "follow": true,
      "nocache": false
    },
    "description": `Generated by create next app`,
    "generator": `Next.js`,
    "applicationName": `Next.js`,
    "creator": `${AUTHOR_NAME}`,
    "publisher": `${AUTHOR_NAME}`,
    "authors": { "name": `${AUTHOR_NAME}`, "url": `/` },
    "referrer": `origin-when-cross-origin`,
    "formatDetection": {
      "email": false,
      "address": false,
      "telephone": false
    },
    "alternates": {
      "canonical": `/`
    }
  }
  return metaData;
};

export const viewport: Viewport = {
  colorScheme: 'dark light',
  viewportFit:'cover',
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="ja-JP">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        {children}
      </body>
    </html>
  );
}
